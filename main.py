import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import MessageNotModified
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import logging
import requests
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.storage import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('bot')

# –¢–æ–∫–µ–Ω—ã
API_TOKEN = '7711624063:AAH-Ak4OhAoYDeKbQb43tW-qNtKEz6G_B-8'
CRYPTOBOT_API_TOKEN = '324481:AARrPUiiThCGEN5HlHZ9jYUSBwNATb7sLzS'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

class MenuState(StatesGroup):
    main_menu = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'], state="*")
async def start_command(message: types.Message, state: FSMContext):
    await bot.send_video_note(message.chat.id, video_note=open('C:/Users/fedor/Downloads/Telegram Desktop/–¥–∏–∞–Ω–∞.mp4', 'rb'))
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Å—Ç—Ä–∞—Å—Ç–∏ –∏ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏! üíã\n\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–∏–∞–Ω–∞, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª —Å —ç—Ä–æ—Ç–∏–∫–æ–πüåπ\n\n"
        "–í –º–æ–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ —Ç–µ–±—è –∂–¥—É—Ç:\n\n"
        "‚ú®–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫—Ä—É–∂–æ—á–∫–∏\n"
        "üéß–ú–æ–∏ –ª–∏—á–Ω—ã–µ –∞—É–¥–∏–æ\n"
        "üìñ –û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –º–æ–µ–π –∂–∏–∑–Ω–∏\n"
        "üì∏ –≠—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≤–∏–¥–µ–æ\n"
        "‚úâÔ∏è–¢–∞–∫ –∂–µ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ —Ç–∞–Ω—Ü—ã –∏ —Å—Ç—Ä–∏–ø—Ç–∏–∑\n\n"
        "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –æ–±—â–µ–Ω–∏–µ–º —Å–æ –º–Ω–æ–πüíû\n\n"
        "–î–∞–≤–∞–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –≤–º–µ—Å—Ç–µ! ‚ù§Ô∏è\n\n"
        "–ó–∞–±—É–¥—å –æ–±–æ –≤—Å—ë–º –Ω–∞ —Å–≤–µ—Ç–µ ‚Äî —è –∂–¥—É —Ç–µ–±—è. ‚ú®"
    )
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(text="üíµ–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='pay_access')
    )
    keyboard.add(
        InlineKeyboardButton(text="üçì–ë–æ–ª—å—à–µ –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ", callback_data='more_about_private_channel')
    )
    keyboard.add(
        InlineKeyboardButton(text="üë§–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url='https://t.me/your_support_bot')
    )
    await message.answer(welcome_text, reply_markup=keyboard)
    await MenuState.main_menu.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø"
@dp.callback_query_handler(lambda c: c.data == 'pay_access', state=MenuState.main_menu)
async def pay_access_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="1 –º–µ—Å—è—Ü ($155)", callback_data='pay_1_month'))
    keyboard.add(InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ ($400)", callback_data='pay_3_months'))
    keyboard.add(InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ ($700)", callback_data='pay_6_months'))
    keyboard.add(InlineKeyboardButton(text="1 –≥–æ–¥ ($1200)", callback_data='pay_1_year'))
    keyboard.add(InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data='back_to_menu'))

    try:
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id,
                                    text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
                                    reply_markup=keyboard)
    except MessageNotModified:
        pass

async def handle_payment_period(callback_query: types.CallbackQuery, period_text: str, payment_url: str):
    await callback_query.answer()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üíµ–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url))
    keyboard.add(InlineKeyboardButton(text="‚ùì–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å CryptoBot?", url='https://teletype.in/@ipa_dark/cryptobot'))
    keyboard.add(InlineKeyboardButton(text="‚úÖ–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f'payment_check_{period_text}'))
    keyboard.add(InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data='pay_access'))

    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period_text}. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'pay_1_month', state=MenuState.main_menu)
async def pay_1_month_callback(callback_query: types.CallbackQuery):
    await handle_payment_period(callback_query, "1 –º–µ—Å—è—Ü", 'https://t.me/send?start=IVoCFekRfe7q')

@dp.callback_query_handler(lambda c: c.data == 'pay_3_months', state=MenuState.main_menu)
async def pay_3_months_callback(callback_query: types.CallbackQuery):
    await handle_payment_period(callback_query, "3 –º–µ—Å—è—Ü–∞", 'https://t.me/send?start=IVJvRYxMw339')

@dp.callback_query_handler(lambda c: c.data == 'pay_6_months', state=MenuState.main_menu)
async def pay_6_months_callback(callback_query: types.CallbackQuery):
    await handle_payment_period(callback_query, "6 –º–µ—Å—è—Ü–µ–≤", 'https://t.me/send?start=IV7uyt4UaFZV')

@dp.callback_query_handler(lambda c: c.data == 'pay_1_year', state=MenuState.main_menu)
async def pay_1_year_callback(callback_query: types.CallbackQuery):
    await handle_payment_period(callback_query, "1 –≥–æ–¥", 'https://t.me/send?start=IV9MVPdk0K2n')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
@dp.callback_query_handler(lambda c: c.data.startswith('payment_check_'), state=MenuState.main_menu)
async def payment_check_callback(callback_query: types.CallbackQuery):
    period_text = callback_query.data.split('_')[-1]
    invoice_id = 'example_invoice_id'  # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–ª–∞—Ç–µ–∂–∞
    payment_status = await check_payment_status(invoice_id)
    if payment_status:
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="üë§–ú–ï–ù–ï–î–ñ–ï–†", url='https://t.me/your_manager_bot')
        )
        await bot.send_message(callback_query.from_user.id, "–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ–π–¥–µ–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –±–æ—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.", reply_markup=keyboard)
    else:
        await bot.answer_callback_query(callback_query.id, "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –ø–µ—Ä–∏–æ–¥.", show_alert=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
async def check_payment_status(invoice_id):
    url = f'https://api.telegram.org/bot{CRYPTOBOT_API_TOKEN}/getInvoiceStatus?invoice_id={invoice_id}'
    response = requests.get(url)
    data = response.json()
    if data['ok'] and data['result']['state'] == 'paid':
        return True
    else:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–æ–ª—å—à–µ –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ"
@dp.callback_query_handler(lambda c: c.data == 'more_about_private_channel', state=MenuState.main_menu)
async def more_about_private_channel_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    more_info_text = (
        "–ß—Ç–æ —Ç–∞–∫–æ–µ Diana brilliant content üçì?\n\n"
        "–≠—Ç–æ –∑–∞–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –º–Ω–µ –∏ –º–æ–µ–º—É –º–∏—Ä—É –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–π, –≥–¥–µ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å –≤—Å—é –≥–ª—É–±–∏–Ω—É —Å—Ç—Ä–∞—Å—Ç–∏ –∏ –∂–µ–ª–∞–Ω–∏—è.\n\n"
        "–¢–æ, —á—Ç–æ —Ç—ã –Ω–∞–π–¥—ë—à—å –∑–¥–µ—Å—å, ‚Äî –æ—Å–æ–±–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è, –∏ –∏–Ω—Ç–∏–º–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ —è –¥–µ–ª—é—Å—å —Ç–æ–ª—å–∫–æ —Å —Ç–æ–±–æ–π.\n\n"
        "‚ñ´Ô∏è–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è –ø—Ä–æ–≤–æ–∂—É —ç—Ñ–∏—Ä—ã –∏ –¥–µ–ª–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫—Ä—É–∂–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∂—É, –∫—Ä–æ–º–µ —Å–≤–æ–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö üòà\n"
        "‚ñ´Ô∏è–•–æ—á–µ—à—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –º–æ–∏ —Ñ–∞–Ω—Ç–∞–∑–∏–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–æ –º–Ω–æ–π —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã? ‚Äî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è, –∏ —è –ø–æ–∫–∞–∂—É, —á—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Å—Ç–æ—è—â–∞—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å.\n\n"
        "‚ñ´Ô∏è–í –∫–∞–Ω–∞–ª–µ –ø–æ–ª—É—á–∏—à—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–∏–º –∞—É–¥–∏–æ, –ª–∏—á–Ω—ã–º –∏—Å—Ç–æ—Ä–∏—è–º –∏ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Å—Ç–∞–≤—è—Ç —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ –±–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ.\n\n"
        "‚ñ´Ô∏è–¢–∞–∫–∂–µ —è –ø—É–±–ª–∏–∫—É—é —Ç–∞–Ω—Ü—ã –∏ —Å—Ç—Ä–∏–ø—Ç–∏–∑, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å –º–æ–º–µ–Ω—Ç—ã, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏—Å–∫—É—à–µ–Ω–∏–µ–º –∏ —Å–æ–±–ª–∞–∑–Ω–æ–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ —É–≤–∏–¥–∏—à—å –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ üî•\n\n"
        "–î–ª—è —Ç–µ–±—è —ç—Ç–æ –≤—Å—ë –ø–æ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω–µ, –∫–∞–∫ –¥–ª—è –º–æ–µ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Å—Ç—è.\n\n"
        "–í –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—Ç—Å—è —Ä–∞—Å–∫—Ä—ã—Ç—å. –í —ç—Ç–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ —Ç—ã –Ω–µ –æ–¥–∏–Ω: —Ç–µ–±—è –æ–∫—Ä—É–∂–∞—é—Ç —Ç–µ, –∫—Ç–æ, –∫–∞–∫ –∏ —Ç—ã, –∂–∞–∂–¥–µ—Ç —Å—Ç—Ä–∞—Å—Ç–∏, —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏.\n\n"
        "–Ø –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ –≤—Å—ë, —á—Ç–æ –¥–µ—Ä–∂–∞–ª–∞ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.\n\n"
        "–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–æ –º–Ω–µ? ü´¶"
    )
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data='back_to_menu'))
    keyboard.add(InlineKeyboardButton(text="üíµ–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='pay_access'))

    try:
        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=more_info_text,
            reply_markup=keyboard
        )
    except MessageNotModified:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda c: c.data == 'back_to_menu', state=MenuState.main_menu)
async def back_to_menu_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await start_command(callback_query.message, state)

if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
